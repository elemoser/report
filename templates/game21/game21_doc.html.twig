{% extends "base.html.twig" %}

{% block title %}Game21{% endblock %}

{% block body %}
    <h1>Dokumentation</h1>

    <p>Här på sidan hittar du all dokumentation som har skapats för spelet 21,
    inklusive ett UML-diagram och en kort beskrivning av de skapade klasserna,
    ett flödesschema för spelet samt pseudokod för en metod som kontrollerar vem som har vunnit eller förlorat.
    </p>

    <h2>Klasser</h2>
    <div>
    <p>
        För det här spelet skapade jag tre klasser som antingen ärver från eller använder de klasser som skapades för det enkla <a class="link" href="{{ path('card_home') }}">kortspelet i kmom02</a>.
        För att representera spelarna i spelet skapade jag klasserna Player och Bank.
        Player-klassen representerar en spelare i Tjugoett spelet.
        Den har egenskaper för spelarens namn och dennes aktuella korthand (representerad som ett CardCollection-objekt).
        Klassen har metoder för att lägga till ett nytt kort till handen, hämta handen som en array av strängar, hämta handens värden, färger och antal.
        Bank-klassen ärver från Player-klassen.
        Den enda skillnaden mellan de två klasserna är att Bank har standardnamnet "bank", medan ett namn måste anges när man initierar en ny Player.
    </p>
    <p>
        För att representera spelet skapade jag en klass Game21.
        Den här klassen har metoder för att lägga till spelare i spelet, lägga till kortlekar, dra nya kort och beräkna en spelares totala hand.
        Den har också metoder för att hämta den aktuella och nästa spelare i kön och för att hämta den aktuella spelarens hand som en array.
        Klassen använder sig av klasserna Player och DeckOfCards.
        Nedan visas ett UML-diagram för de klasser som nämns ovan.
        Observera att jag använde UML-diagrammet som en riktlinje när jag kodade, men att jag gjorde ändringar när jag fann det nödvändigt. 
    </p>
    <iframe frameborder="0" style="width:100%;height:1036px;" src="https://viewer.diagrams.net/?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&page-id=2WVLxLC2BJvlH6kW8c5t&title=UML_Kortlek.drawio#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1qIo7t2LJX73xQ3oK5V8UwLoNorSZuz_B%26export%3Ddownload"></iframe>
    </div>

    <h2>Flödesschema</h2>
    <div>
    <p>
        Nedan visas flödesschemat jag skapade för att representerar hur jag tänkte för att lösa grunderna i Tjugoett spelet.
    </p>
    <iframe frameborder="0" style="width:100%;height:655px;" src="https://viewer.diagrams.net/?tags=%7B%7D&highlight=0000ff&edit=_blank&layers=1&nav=1&page-id=jzGJfJnaShjbMTXZ_vHA&title=UML_Kortlek.drawio#Uhttps%3A%2F%2Fdrive.google.com%2Fuc%3Fid%3D1qIo7t2LJX73xQ3oK5V8UwLoNorSZuz_B%26export%3Ddownload"></iframe>
    </div>

    <h2>Psuedokod</h2>
    <div>
    <p>
        {# Skapa psuedokod som visar hur du tänker lösa delar av spelet. #}
        Nedan visas pseudokod för hur jag tänkte att kontrollera vem som vann spelet.
        Med hjälp av denna pseudokod skapade jag metoden <code>checkWinStatus</code> i Game21-klassen.
        Observera dock att jag gjorde justeringar när jag kodade metoden.
    </p>
    <pre class="code-block">
        <b>Game21->checkWinStatus</b>

        define array[string, int] named $report

        for each $player in $this->queue
            if $player has at least one card in $cardHand then
                call $this->computeHandTotal($player)
                save returned value of type int in $report with key $player->name
            endif
        endfor

        define array[string] $winner
        define array[string] $loser

        for $key, $value in $report
            if $value is greater than 21 then
                add $key to $loser
            else (if $value is lower than 21)
                add $key to $winner
            endif
        endfor

        if length of $winner is greater than 1 then
            define array $diff
            for $key, $value in $report
                assign $diff[$key] is 21 - $value
            endfor
            sort $diff according to values in ascending order
            if values in $diff are equal
                $winner is $player with the name “bank” 
                $loser is $diff without "bank"
            endif
        endif

        return $winner
    </pre>
    </div>

    <a class="button orange-button" href="{{ path('game_home') }}">Tillbaka till spelets landningssida</a>
{% endblock %}